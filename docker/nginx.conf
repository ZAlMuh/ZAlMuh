events {
    worker_connections 1024;
}

http {
    upstream bot_shards {
        least_conn;
        server bot-shard-0:8000 max_fails=3 fail_timeout=30s;
        server bot-shard-1:8000 max_fails=3 fail_timeout=30s;
        server bot-shard-2:8000 max_fails=3 fail_timeout=30s;
        server bot-shard-3:8000 max_fails=3 fail_timeout=30s;
        server bot-shard-4:8000 max_fails=3 fail_timeout=30s;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    server {
        listen 80;
        server_name _;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        # Health check endpoint
        location /health {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://bot_shards;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Webhook endpoints with shard routing
        location ~ ^/webhook/([0-4])$ {
            limit_req zone=webhook burst=50 nodelay;
            
            set $shard_id $1;
            
            # Route to specific shard based on URL parameter
            if ($shard_id = "0") {
                proxy_pass http://bot-shard-0:8000;
            }
            if ($shard_id = "1") {
                proxy_pass http://bot-shard-1:8000;
            }
            if ($shard_id = "2") {
                proxy_pass http://bot-shard-2:8000;
            }
            if ($shard_id = "3") {
                proxy_pass http://bot-shard-3:8000;
            }
            if ($shard_id = "4") {
                proxy_pass http://bot-shard-4:8000;
            }

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Webhook specific timeouts
            proxy_connect_timeout 3s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Disable buffering for real-time processing
            proxy_buffering off;
            proxy_request_buffering off;
        }

        # Stats endpoint
        location /stats {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://bot_shards;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Root endpoint
        location / {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://bot_shards;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Deny access to sensitive files
        location ~ /\. {
            deny all;
        }

        location ~ \.env {
            deny all;
        }
    }

    # SSL configuration (uncomment when SSL certificates are available)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #     
    #     ssl_certificate /etc/nginx/ssl/fullchain.pem;
    #     ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    #     
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # ... same location blocks as above ...
    # }
}